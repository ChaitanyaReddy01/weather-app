{"version":3,"sources":["WeatherApp.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherApp","city","setCity","useState","weather","setWeather","locationWeather","setLocationWeather","cityWeatherList","setCityWeatherList","loading","setLoading","API_KEY","cities","fetchWeatherByCoords","async","lat","lon","weatherResponse","forecastResponse","Promise","all","fetch","weatherData","json","forecastData","cod","forecast","error","console","useEffect","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","log","message","alert","timeout","maximumAge","enableHighAccuracy","warn","cityWeatherData","map","cityName","fetchCityWeather","getLocalTime","timezoneOffset","utc","Date","getTime","getTimezoneOffset","toLocaleTimeString","hour","minute","React","createElement","className","type","value","onChange","e","target","placeholder","onClick","trim","fetchWeatherByCity","name","src","icon","alt","main","temp","toFixed","description","timezone","humidity","wind","speed","data","index","key","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.13ab0105.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport React from 'react';\r\n\r\n\r\nconst WeatherApp = () => {\r\n  const [city, setCity] = useState(\"\");\r\n  const [weather, setWeather] = useState(null);\r\n  const [locationWeather, setLocationWeather] = useState(null);\r\n  const [cityWeatherList, setCityWeatherList] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const API_KEY = \"a8de69ee61d850dd7331376378cafc85\"; // Replace with your API key\r\n\r\n  const cities = [\"New York\", \"London\", \"Tokyo\", \"Sydney\", \"Hyderabad\"];\r\n\r\n  const fetchWeatherByCity = async (cityName) => {\r\n    if (!cityName.trim()) return;\r\n    setLoading(true);\r\n    try {\r\n      const [weatherResponse, forecastResponse] = await Promise.all([\r\n        fetch(\r\n          `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}&units=metric`\r\n        ),\r\n        fetch(\r\n          `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${API_KEY}&units=metric`\r\n        ),\r\n      ]);\r\n      const weatherData = await weatherResponse.json();\r\n      const forecastData = await forecastResponse.json();\r\n      if (weatherData.cod === 200) {\r\n        setWeather({ ...weatherData, forecast: forecastData });\r\n      } else {\r\n        setWeather(null);\r\n        alert(\"City not found\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching weather:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchWeatherByCoords = async (lat, lon) => {\r\n    setLoading(true);\r\n    try {\r\n      const [weatherResponse, forecastResponse] = await Promise.all([\r\n        fetch(\r\n          `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`\r\n        ),\r\n        fetch(\r\n          `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`\r\n        ),\r\n      ]);\r\n      const weatherData = await weatherResponse.json();\r\n      const forecastData = await forecastResponse.json();\r\n      if (weatherData.cod === 200) {\r\n        setLocationWeather({ ...weatherData, forecast: forecastData });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching weather by coords:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchCityWeather = async () => {\r\n    try {\r\n      const cityWeatherData = await Promise.all(\r\n        cities.map(async (cityName) => {\r\n          const response = await fetch(\r\n            `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}&units=metric`\r\n          );\r\n          return response.json();\r\n        })\r\n      );\r\n      setCityWeatherList(cityWeatherData);\r\n    } catch (error) {\r\n      console.error(\"Error fetching city weather:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getLocationWeather = () => {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n            const { latitude, longitude } = position.coords;\r\n            console.log(\"Geolocation success:\", latitude, longitude); // Debug log\r\n            fetchWeatherByCoords(latitude, longitude);\r\n          },\r\n          (error) => {\r\n            console.error(\"Geolocation error:\", error.message); // Debug log\r\n            fetchWeatherByCoords(40.7128, -74.0060); // Fallback to New York\r\n            alert(\"Location access denied. Showing default location (New York).\");\r\n          },\r\n          { timeout: 10000, maximumAge: 10000, enableHighAccuracy: true }\r\n        );\r\n      } else {\r\n        console.warn(\"Geolocation not supported by browser\"); // Debug log\r\n        fetchWeatherByCoords(40.7128, -74.0060); // Fallback to New York\r\n        alert(\"Geolocation not supported. Showing default location (New York).\");\r\n      }\r\n    };\r\n\r\n    getLocationWeather();\r\n    fetchCityWeather();\r\n  }, []);\r\n\r\n  const getLocalTime = (timezoneOffset) => {\r\n    const utc = new Date().getTime() + new Date().getTimezoneOffset() * 60000;\r\n    const localDate = new Date(utc + timezoneOffset * 1000);\r\n    return localDate.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" });\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <header className=\"header\">\r\n        <h2>Weather</h2>\r\n      </header>\r\n\r\n      <main className=\"main-content\">\r\n        {loading && <div className=\"loading\">Loading...</div>}\r\n\r\n        <div className=\"search-section\">\r\n          <input\r\n            type=\"text\"\r\n            value={city}\r\n            onChange={(e) => setCity(e.target.value)}\r\n            placeholder=\"Search for a city...\"\r\n          />\r\n          <button onClick={() => fetchWeatherByCity(city)}>Search</button>\r\n        </div>\r\n\r\n        {locationWeather && !loading && (\r\n          <div className=\"location-weather\">\r\n            <h2>Your Location: {locationWeather.name}</h2>\r\n            <div className=\"weather-info\">\r\n              <img\r\n                src={`https://openweathermap.org/img/wn/${locationWeather.weather[0].icon}@2x.png`}\r\n                alt=\"weather icon\"\r\n              />\r\n              <h3>{locationWeather.main.temp.toFixed(1)}°C</h3>\r\n              <p>{locationWeather.weather[0].description}</p>\r\n              <p>Local Time: {getLocalTime(locationWeather.timezone)}</p>\r\n              <p>Humidity: {locationWeather.main.humidity}%</p>\r\n              <p>Wind: {locationWeather.wind.speed} m/s</p>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {weather && !loading && (\r\n          <div className=\"searched-weather\">\r\n            <h2>{weather.name}</h2>\r\n            <div className=\"weather-info\">\r\n              <img\r\n                src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\r\n                alt=\"weather icon\"\r\n              />\r\n              <h3>{weather.main.temp.toFixed(1)}°C</h3>\r\n              <p>{weather.weather[0].description}</p>\r\n              <p>Local Time: {getLocalTime(weather.timezone)}</p>\r\n              <p>Humidity: {weather.main.humidity}%</p>\r\n              <p>Wind: {weather.wind.speed} m/s</p>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"city-weather\">\r\n          {cityWeatherList.map((data, index) => (\r\n            <div key={index} className=\"city-card\">\r\n              <h3>{data.name}</h3>\r\n              <p>{getLocalTime(data.timezone)}</p>\r\n              <img\r\n                src={`https://openweathermap.org/img/wn/${data.weather[0].icon}.png`}\r\n                alt=\"weather icon\"\r\n              />\r\n              <h4>{data.main.temp.toFixed(1)}°C</h4>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </main>\r\n\r\n      <footer className=\"footer\">\r\n        <p>Weather App © 2025</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherApp;","import WeatherApp from \"./WeatherApp\";\nimport \"./App.css\";\nimport React from 'react';\n\n\n\nfunction App() {\n  return <WeatherApp />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}